// Code generated by MockGen. DO NOT EDIT.
// Source: repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/serjyuriev/diploma-1/internal/pkg/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// InsertOrder mocks base method.
func (m *MockRepository) InsertOrder(ctx context.Context, number string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertOrder", ctx, number, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertOrder indicates an expected call of InsertOrder.
func (mr *MockRepositoryMockRecorder) InsertOrder(ctx, number, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOrder", reflect.TypeOf((*MockRepository)(nil).InsertOrder), ctx, number, userID)
}

// InsertUser mocks base method.
func (m *MockRepository) InsertUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockRepositoryMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockRepository)(nil).InsertUser), ctx, user)
}

// SelectBalanceByUser mocks base method.
func (m *MockRepository) SelectBalanceByUser(ctx context.Context, userID int) (*models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectBalanceByUser", ctx, userID)
	ret0, _ := ret[0].(*models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectBalanceByUser indicates an expected call of SelectBalanceByUser.
func (mr *MockRepositoryMockRecorder) SelectBalanceByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectBalanceByUser", reflect.TypeOf((*MockRepository)(nil).SelectBalanceByUser), ctx, userID)
}

// SelectOrderByNumber mocks base method.
func (m *MockRepository) SelectOrderByNumber(ctx context.Context, number string) (*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrderByNumber", ctx, number)
	ret0, _ := ret[0].(*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrderByNumber indicates an expected call of SelectOrderByNumber.
func (mr *MockRepositoryMockRecorder) SelectOrderByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrderByNumber", reflect.TypeOf((*MockRepository)(nil).SelectOrderByNumber), ctx, number)
}

// SelectOrdersByUser mocks base method.
func (m *MockRepository) SelectOrdersByUser(ctx context.Context, userID int) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrdersByUser", ctx, userID)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectOrdersByUser indicates an expected call of SelectOrdersByUser.
func (mr *MockRepositoryMockRecorder) SelectOrdersByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrdersByUser", reflect.TypeOf((*MockRepository)(nil).SelectOrdersByUser), ctx, userID)
}

// SelectUser mocks base method.
func (m *MockRepository) SelectUser(ctx context.Context, login string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectUser", ctx, login)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectUser indicates an expected call of SelectUser.
func (mr *MockRepositoryMockRecorder) SelectUser(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectUser", reflect.TypeOf((*MockRepository)(nil).SelectUser), ctx, login)
}

// SelectWithdrawalsByUser mocks base method.
func (m *MockRepository) SelectWithdrawalsByUser(ctx context.Context, userID int) ([]*models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectWithdrawalsByUser", ctx, userID)
	ret0, _ := ret[0].([]*models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectWithdrawalsByUser indicates an expected call of SelectWithdrawalsByUser.
func (mr *MockRepositoryMockRecorder) SelectWithdrawalsByUser(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectWithdrawalsByUser", reflect.TypeOf((*MockRepository)(nil).SelectWithdrawalsByUser), ctx, userID)
}

// UpdateBalance mocks base method.
func (m *MockRepository) UpdateBalance(ctx context.Context, userID int, amount float64, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, userID, amount, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockRepositoryMockRecorder) UpdateBalance(ctx, userID, amount, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockRepository)(nil).UpdateBalance), ctx, userID, amount, orderID)
}

// UpdateOrderStatus mocks base method.
func (m *MockRepository) UpdateOrderStatus(ctx context.Context, number string, order *models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, number, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockRepositoryMockRecorder) UpdateOrderStatus(ctx, number, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockRepository)(nil).UpdateOrderStatus), ctx, number, order)
}
